SELECT "pairs".* FROM "pairs" WHERE "pairs"."code" IN ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19)
SELECT "pairs".* FROM "pairs" WHERE "pairs"."code" IN (?)
SELECT "pairs".* FROM "pairs" WHERE "pairs"."xcode" values($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19)
SELECT "pairs".* FROM "pairs" WHERE "pairs"."xcode" VALUES (?)
INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)
INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (?)
SELECT pg_database.datname,tmp.mode,COALESCE(count,$1) as count FROM ( VALUES ($2), ($3), ($4), ($5), ($6), ($7), ($8), ($9) ) AS tmp(mode) CROSS JOIN pg_database LEFT JOIN (SELECT database, lower(mode) AS mode,count(*) AS count FROM pg_locks WHERE database IS NOT NULL GROUP BY database, lower(mode) ) AS tmp2 ON tmp.mode=tmp2.mode and pg_database.oid = tmp2.database ORDER BY 1
SELECT pg_database.datname,tmp.mode,COALESCE(count,?) as count FROM ( VALUES (?) ) AS tmp(mode) CROSS JOIN pg_database LEFT JOIN (SELECT database, lower(mode) AS mode,count(*) AS count FROM pg_locks WHERE database IS NOT NULL GROUP BY database, lower(mode) ) AS tmp2 ON tmp.mode=tmp2.mode and pg_database.oid = tmp2.database ORDER BY ?
SELECT pg_database.datname,tmp.mode,COALESCE(count,$1) as count FROM ( VALUES ($2), (CURRENT_TIMESTAMP) ) AS tmp(mode) CROSS JOIN pg_database LEFT JOIN (SELECT database, lower(mode) AS mode,count(*) AS count FROM pg_locks WHERE database IS NOT NULL GROUP BY database, lower(mode) ) AS tmp2 ON tmp.mode=tmp2.mode and pg_database.oid = tmp2.database ORDER BY 1
SELECT pg_database.datname,tmp.mode,COALESCE(count,?) as count FROM ( VALUES (?) ) AS tmp(mode) CROSS JOIN pg_database LEFT JOIN (SELECT database, lower(mode) AS mode,count(*) AS count FROM pg_locks WHERE database IS NOT NULL GROUP BY database, lower(mode) ) AS tmp2 ON tmp.mode=tmp2.mode and pg_database.oid = tmp2.database ORDER BY ?
SELECT "pairs".* FROM "pairs" WHERE "pairs"."binance_code" = $1 AND "pairs"."code" = $2 LIMIT $3
SELECT "pairs".* FROM "pairs" WHERE "pairs"."binance_code" = ? AND "pairs"."code" = ? LIMIT ?
SET application_name='sidekiq 5.2.3 app [9 of 40 busy]'
SET ? TO ?
SET SESSION timezone TO 'UTC'
SET ? TO ?
set client_encoding to 'UTF8'
SET ? TO ?
DROP TABLE _temp_638
DROP TABLE _temp_?
DROP TABLE table_2020_02
DROP TABLE table_?
TEST i1 TEST i2.test TEST qq23 TEST
TEST i1 TEST i2.test TEST qq23 TEST
SELECT "pairs".* FROM "pairs" WHERE "pairs"."id" = 100 LIMIT 10
SELECT "pairs".* FROM "pairs" WHERE "pairs"."id" = ? LIMIT ?
SELECT "pairs".* FROM "pairs" WHERE "pairs"."id"=100 LIMIT 10
SELECT "pairs".* FROM "pairs" WHERE "pairs"."id"=? LIMIT ?
SELECT "pairs".* FROM "pairs" WHERE "pairs"."id" = $1 LIMIT $2
SELECT "pairs".* FROM "pairs" WHERE "pairs"."id" = ? LIMIT ?
TEST VALUES ($1, $2, $32) TEST 10 TEST table_2020_02 TEST table_2020 TEST i5.test
TEST VALUES (?) TEST ? TEST table_? TEST table_? TEST i5.test
SELECT t.oid, t.typname, t.typelem, t.typdelim, t.typinput, r.rngsubtype, t.typtype, t.typbasetype FROM pg_type as t LEFT JOIN pg_range as r ON oid = rngtypid WHERE t.typname IN ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40) OR t.typtype IN ($41, $42, $43) OR t.typinput = $44::regprocedure OR t.typelem != $45
SELECT t.oid, t.typname, t.typelem, t.typdelim, t.typinput, r.rngsubtype, t.typtype, t.typbasetype FROM pg_type as t LEFT JOIN pg_range as r ON oid = rngtypid WHERE t.typname IN (?) OR t.typtype IN (?) OR t.typinput = ?::regprocedure OR t.typelem != ?
COPY _temp_99 ("candle_start_time","open_price","high_price","low_price","close_price","base_asset_volume","candle_end_time","quote_asset_volume","number_of_trades","taker_buy_base_asset_volume","taker_buy_quote_asset_volume","pair_id","exchange_symbol","interval","is_closed") FROM STDIN DELIMITER ',' CSV
COPY _temp_? ("candle_start_time","open_price","high_price","low_price","close_price","base_asset_volume","candle_end_time","quote_asset_volume","number_of_trades","taker_buy_base_asset_volume","taker_buy_quote_asset_volume","pair_id","exchange_symbol","interval","is_closed") FROM STDIN DELIMITER '?' CSV
EXPLAIN SELECT "pairs".* FROM "pairs" WHERE "pairs"."zcode" IN ('USDT_ADA', 'USDT_ALGO', 'USDT_ANKR', 'USDT_ZRX') AND "pairs"."extra" IN ('USDT_ADA', 'USDT_ZRX')
EXPLAIN SELECT "pairs".* FROM "pairs" WHERE "pairs"."zcode" IN (?) AND "pairs"."extra" IN (?)
SELECT COUNT(*) as amount FROM (select u.id, u.email, u.locale, GREATEST(TO_TIMESTAMP(opt.op_time_max), TO_TIMESTAMP(trn.tn_time_max), TO_TIMESTAMP (u.reg_date)) as activity_date from users u, user_accounts u_acc left join (select account_id as user_id, max(open_time) AS op_time_max from operations GROUP BY account_id) AS opt on u_acc.user_id = opt.user_id left join (select user_id, max(open_time) AS tn_time_max from tournament_operations GROUP BY user_id) AS trn on u_acc.user_id = trn.user_id left join (select ua.user_id, max(ual.date_time) AS acc_time_max from user_account_log ual, user_accounts ua where ual.account_id = ua.id and ual.source = $1 and ua.real = $2 GROUP BY ua.user_id) AS acc on u_acc.user_id = acc.user_id where u.real = $3 and u.email_confirmed = $4 and u.id = u_acc.user_id AND u_acc.real = $5 and u_acc.funds_available>$6 and not exists (select $7 from operations o where o.user_id = u.id and o.open_time > extract($8 from (now() - interval $9))) and not exists (select $10 from tournament_operations t where t.user_id = u.id and t.open_time > extract($11 from (now() - interval $12))) and not exists (select $13 from user_account_log ual join user_accounts ua on ual.account_id = ua.id where ua.user_id = u.id and ual.source = $14 and ua.real = $15 and ual.date_time > now() - interval $16) AND ( TO_TIMESTAMP(opt.op_time_max)::DATE = (now() - INTERVAL $17)::DATE OR TO_TIMESTAMP(trn.tn_time_max)::DATE = (now() - INTERVAL $18)::DATE OR acc.acc_time_max::DATE = (now() - INTERVAL $19)::DATE OR TO_TIMESTAMP(u.reg_date)::DATE = (now() - INTERVAL $20)::DATE)) users_set
SELECT COUNT(*) as amount FROM (select u.id, u.email, u.locale, GREATEST(TO_TIMESTAMP(opt.op_time_max), TO_TIMESTAMP(trn.tn_time_max), TO_TIMESTAMP (u.reg_date)) as activity_date from users u, user_accounts u_acc left join (select account_id as user_id, max(open_time) AS op_time_max from operations GROUP BY account_id) AS opt on u_acc.user_id = opt.user_id left join (select user_id, max(open_time) AS tn_time_max from tournament_operations GROUP BY user_id) AS trn on u_acc.user_id = trn.user_id left join (select ua.user_id, max(ual.date_time) AS acc_time_max from user_account_log ual, user_accounts ua where ual.account_id = ua.id and ual.source = ? and ua.real = ? GROUP BY ua.user_id) AS acc on u_acc.user_id = acc.user_id where u.real = ? and u.email_confirmed = ? and u.id = u_acc.user_id AND u_acc.real = ? and u_acc.funds_available>? and not exists (select ? from operations o where o.user_id = u.id and o.open_time > extract(? from (now() - interval ?))) and not exists (select ? from to...
SELECT COUNT(users.id) AS _cnt FROM users WHERE NOT EXISTS(SELECT id FROM user_notifications WHERE user_id = users.id AND notification_type = $1) -- comment
SELECT COUNT(users.id) AS _cnt FROM users WHERE NOT EXISTS(SELECT id FROM user_notifications WHERE user_id = users.id AND notification_type = ?)
SELECT '--text'
SELECT '?'
SELECT COUNT(users.id) AS _cnt FROM users /* comment1 */ WHERE NOT EXISTS(SELECT id FROM user_notifications WHERE /* comment2 */ user_id = users.id AND notification_type = $1)
SELECT COUNT(users.id) AS _cnt FROM users WHERE NOT EXISTS(SELECT id FROM user_notifications WHERE user_id = users.id AND notification_type = ?)
SELECT count(1) as cnt FROM table WHERE mtime > now() - interval '1 day'
SELECT count(?) as cnt FROM table WHERE mtime > now() - interval '?'
SELECT example_function(1, 2,3, 4)
SELECT example_function(?)
SELECT col1,  col2,  col3 FROM table
SELECT col1, col2, col3 FROM table
